<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="myshmclient-main_8cpp" kind="file">
    <compoundname>myshmclient-main.cpp</compoundname>
    <includes refid="myshmclient_8hpp" local="no">myshmclient.hpp</includes>
    <includes local="no">boost/program_options.hpp</includes>
    <incdepgraph>
      <node id="121">
        <label>osmium/io/any_input.hpp</label>
      </node>
      <node id="145">
        <label>iomanip</label>
      </node>
      <node id="151">
        <label>limits</label>
      </node>
      <node id="149">
        <label>iterator</label>
      </node>
      <node id="158">
        <label>shmclient.hpp</label>
        <link refid="shmclient_8hpp"/>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>osmium/osm/way.hpp</label>
      </node>
      <node id="146">
        <label>car.hpp</label>
        <link refid="car_8hpp"/>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
      </node>
      <node id="160">
        <label>boost/graph/graphviz.hpp</label>
      </node>
      <node id="140">
        <label>stdexcept</label>
      </node>
      <node id="118">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="136">
        <label>string</label>
      </node>
      <node id="129">
        <label>osmium/handler/node_locations_for_ways.hpp</label>
      </node>
      <node id="133">
        <label>map</label>
      </node>
      <node id="128">
        <label>osmium/index/map/sparse_mem_map.hpp</label>
      </node>
      <node id="139">
        <label>exception</label>
      </node>
      <node id="138">
        <label>fstream</label>
      </node>
      <node id="161">
        <label>boost/program_options.hpp</label>
      </node>
      <node id="122">
        <label>osmium/handler.hpp</label>
      </node>
      <node id="154">
        <label>boost/graph/graph_traits.hpp</label>
      </node>
      <node id="155">
        <label>boost/graph/dijkstra_shortest_paths.hpp</label>
      </node>
      <node id="147">
        <label>osmium/osm/types.hpp</label>
      </node>
      <node id="150">
        <label>boost/asio.hpp</label>
      </node>
      <node id="117">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="143">
        <label>condition_variable</label>
      </node>
      <node id="131">
        <label>osmium/geom/coordinates.hpp</label>
      </node>
      <node id="126">
        <label>osmium/osm/relation.hpp</label>
      </node>
      <node id="130">
        <label>osmium/geom/haversine.hpp</label>
      </node>
      <node id="135">
        <label>vector</label>
      </node>
      <node id="120">
        <label>osmreader.hpp</label>
        <link refid="osmreader_8hpp"/>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
      </node>
      <node id="148">
        <label>cstdlib</label>
      </node>
      <node id="115">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="132">
        <label>iostream</label>
      </node>
      <node id="127">
        <label>osmium/index/map/sparse_mem_table.hpp</label>
      </node>
      <node id="124">
        <label>osmium/osm/node.hpp</label>
      </node>
      <node id="157">
        <label>boost/property_map/property_map.hpp</label>
      </node>
      <node id="144">
        <label>mutex</label>
      </node>
      <node id="142">
        <label>chrono</label>
      </node>
      <node id="141">
        <label>thread</label>
      </node>
      <node id="159">
        <label>boost/graph/bellman_ford_shortest_paths.hpp</label>
      </node>
      <node id="123">
        <label>osmium/visitor.hpp</label>
      </node>
      <node id="112">
        <label>src/myshmclient-main.cpp</label>
        <link refid="myshmclient-main.cpp"/>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>set</label>
      </node>
      <node id="153">
        <label>boost/graph/adjacency_list.hpp</label>
      </node>
      <node id="113">
        <label>myshmclient.hpp</label>
        <link refid="myshmclient_8hpp"/>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="137">
        <label>algorithm</label>
      </node>
      <node id="119">
        <label>smartcity.hpp</label>
        <link refid="smartcity_8hpp"/>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>boost/interprocess/containers/map.hpp</label>
      </node>
      <node id="152">
        <label>memory</label>
      </node>
      <node id="156">
        <label>boost/graph/properties.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="myshmclient-main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pisti/robocar/Robocar/justine/rcemu/src/myshmclient-main.cpp" line="35" column="1" bodyfile="/home/pisti/robocar/Robocar/justine/rcemu/src/myshmclient-main.cpp" bodystart="35" bodyend="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Justine - this is a rapid prototype for development of Robocar City Emulator. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Norbert Bátfai <ulink url="mailto:nbatfai@gmail.com">nbatfai@gmail.com</ulink> </para></simplesect>
<simplesect kind="version"><para>0.0.10</para></simplesect>
</para><sect1 id="traffic_8cpp_1LICENSE">
<title>LICENSE</title>
<para>Copyright (C) 2014 Norbert Bátfai, <ulink url="mailto:batfai.norbert@inf.unideb.hu">batfai.norbert@inf.unideb.hu</ulink></para><para>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para><para>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</para><para>You should have received a copy of the GNU General Public License along with this program. If not, see <ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>.</para></sect1>
<sect1 id="traffic_8cpp_1DESCRIPTION">
<title>DESCRIPTION</title>
<para>Robocar City Emulator and Robocar World Championship</para><para>desc </para></sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="32"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="myshmclient_8hpp" kindref="compound">myshmclient.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/program_options.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>boost::program_options::options_description<sp/>desc<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;Options&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>desc.add_options()</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;produce<sp/>version<sp/>message&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;produce<sp/>help<sp/>message&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;shm&quot;</highlight><highlight class="normal">,<sp/>boost::program_options::value&lt;<sp/>std::string<sp/>&gt;<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;shared<sp/>memory<sp/>segment<sp/>name&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">,<sp/>boost::program_options::value&lt;<sp/>std::string<sp/>&gt;<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>TCP<sp/>port<sp/>that<sp/>the<sp/>traffic<sp/>server<sp/>is<sp/>listening<sp/>on<sp/>to<sp/>allow<sp/>agents<sp/>to<sp/>communicate<sp/>with<sp/>the<sp/>traffic<sp/>simulation,<sp/>the<sp/>default<sp/>value<sp/>is<sp/>10007&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;team&quot;</highlight><highlight class="normal">,<sp/>boost::program_options::value&lt;<sp/>std::string<sp/>&gt;<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;team<sp/>name&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>boost::program_options::variables_map<sp/>vm;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>boost::program_options::store<sp/>(<sp/>boost::program_options::parse_command_line<sp/>(<sp/>argc,<sp/>argv,<sp/>desc<sp/>),<sp/>vm<sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>boost::program_options::notify<sp/>(<sp/>vm<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vm.count<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Robocar<sp/>City<sp/>Emulator<sp/>and<sp/>Robocar<sp/>World<sp/>Championship,<sp/>Sample<sp/>(My)<sp/>SHM<sp/>Client&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Copyright<sp/>(C)<sp/>2014,<sp/>2015<sp/>Norbert<sp/>Bátfai\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;License<sp/>GPLv3+:<sp/>GNU<sp/>GPL<sp/>version<sp/>3<sp/>or<sp/>later<sp/>&lt;http://gnu.org/licenses/gpl.html&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>are<sp/>free<sp/>to<sp/>change<sp/>and<sp/>redistribute<sp/>it.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>NO<sp/>WARRANTY,<sp/>to<sp/>the<sp/>extent<sp/>permitted<sp/>by<sp/>law.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vm.count<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Robocar<sp/>City<sp/>Emulator<sp/>and<sp/>Robocar<sp/>World<sp/>Championship<sp/>home<sp/>page:<sp/>https://code.google.com/p/robocar-emulator/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>desc<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>report<sp/>bugs<sp/>to:<sp/>nbatfai@gmail.com&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::string<sp/>shm;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vm.count<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;shm&quot;</highlight><highlight class="normal"><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shm.assign<sp/>(<sp/>vm[</highlight><highlight class="stringliteral">&quot;shm&quot;</highlight><highlight class="normal">].as<sp/>&lt;<sp/>std::string<sp/>&gt;<sp/>()<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shm.assign<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;JustineSharedMemory&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::string<sp/>port;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vm.count<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal"><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port.assign<sp/>(<sp/>vm[</highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">].as<sp/>&lt;<sp/>std::string<sp/>&gt;<sp/>()<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port.assign<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;10007&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::string<sp/>team;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vm.count<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;team&quot;</highlight><highlight class="normal"><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>team.assign<sp/>(<sp/>vm[</highlight><highlight class="stringliteral">&quot;team&quot;</highlight><highlight class="normal">].as<sp/>&lt;<sp/>std::string<sp/>&gt;<sp/>()<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>team.assign<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;Norbi&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>use<sp/>this<sp/>sample<sp/>you<sp/>should<sp/>add<sp/>your<sp/>copyright<sp/>information<sp/>here<sp/>too:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;This<sp/>SHM<sp/>Client<sp/>program<sp/>has<sp/>been<sp/>modified<sp/>by<sp/>&lt;Your<sp/>Name&gt;&quot;<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Copyright<sp/>(C)<sp/>2014,<sp/>2015<sp/>Norbert<sp/>Bátfai&quot;<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;License<sp/>GPLv3+:<sp/>GNU<sp/>GPL<sp/>version<sp/>3<sp/>or<sp/>later<sp/>&lt;http://gnu.org/licenses/gpl.html&gt;&quot;<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>remove<sp/>this<sp/>copyright<sp/>notice!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Robocar<sp/>City<sp/>Emulator<sp/>and<sp/>Robocar<sp/>World<sp/>Championship,<sp/>Sample<sp/>(My)<sp/>SHM<sp/>Client&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Copyright<sp/>(C)<sp/>2014,<sp/>2015<sp/>Norbert<sp/>Bátfai&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;License<sp/>GPLv3+:<sp/>GNU<sp/>GPL<sp/>version<sp/>3<sp/>or<sp/>later<sp/>&lt;http://gnu.org/licenses/gpl.html&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>are<sp/>free<sp/>to<sp/>change<sp/>and<sp/>redistribute<sp/>it.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>NO<sp/>WARRANTY,<sp/>to<sp/>the<sp/>extent<sp/>permitted<sp/>by<sp/>law.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classjustine_1_1sampleclient_1_1MyShmClient" kindref="compound">justine::sampleclient::MyShmClient</ref><sp/>myShmClient<sp/>{shm.c_str(),<sp/>team<sp/>};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::asio::io_service<sp/>io_service;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//myShmClient.start10<sp/>(<sp/>io_service,<sp/>port.c_str()<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myShmClient.<ref refid="classjustine_1_1sampleclient_1_1MyShmClient_1aa5cb338eade5f427f4a82b28cff4ca14" kindref="member">start</ref><sp/>(<sp/>io_service,<sp/>port.c_str()<sp/>);<sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/>std::exception&amp;<sp/>e<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exception:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/pisti/robocar/Robocar/justine/rcemu/src/myshmclient-main.cpp"/>
  </compounddef>
</doxygen>
